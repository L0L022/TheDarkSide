@@ -89,14 +89,20 @@ module.exports = {
 
   lint: function(editor, linted_file, real_file){
     const helpers=require("atom-linter");
-    const regex = `(?<file>.+):(?<line>\\d+):(?<col>\\d+):\\s*\\w*\\s*(?<type>(${atom.config.get("linter-gcc.gccErrorString")}|${atom.config.get("linter-gcc.gccWarningString")}|${atom.config.get("linter-gcc.gccNoteString")})):\\s*(?<message>.*)`
+    const regex = `(?<file>.+):(?<line>\\d+):(?<col>\\d+):\\s*\\w*\\s*(?<type>(${atom.config.get("linter-gcc.gccErrorString")}|${atom.config.get("linter-gcc.gccWarningString")}|${atom.config.get("linter-gcc.gccNoteString")}))\\s*:\\s*(?<message>.*)`
     command = require("./utility").buildCommand(editor, linted_file);
     return helpers.exec(command.binary, command.args, {stream: "stderr"}).then(output => {
       msgs = helpers.parse(output, regex)
       msgs.forEach(function(entry){
         if (entry.filePath === module.exports.temp_file["C"] || entry.filePath === module.exports.temp_file["C++"]){
           entry.filePath = real_file;
         }
+        if (entry.type ===`${atom.config.get("linter-gcc.gccWarningString")}`)
+            entry.type = "warning";
+        else if (entry.type ===`${atom.config.get("linter-gcc.gccErrorString")}`)
+            entry.type = "error";
+        else if (entry.type ===`${atom.config.get("linter-gcc.gccNoteString")}`)
+            entry.type = "note";
       })
       if (msgs.length == 0 && output.indexOf("error") != -1){
         msgs = [{
